import { Request, Response } from 'express';
import { CommonController } from '../common/controllers/common.controller';
import { ImagesService } from '../services/images.service';

/**
 * ImagegeController class
 * It aims to manage all the operations that involves the images resource
 */
export class ImagesController {
  /**
   * Asyncronous functions that retrieves a list of 30 random images from the DB
   * (15 generated by stylegan3 and 15 real)
   * and sends it back with the status code 200 otherwise 500
   * @param req express Request object
   * @param res express Response object
   */
  async list(req: Request, res: Response): Promise<void>{
    const imagesService = ImagesService.getInstance();
    let real: any;
    let fake: any;
    let merged: any;
    try{
      real = await imagesService.filterList({type:0});
      CommonController.extractIds(real);
      CommonController.shuffleArray(real);
      real = real.slice(0,15);
      //console.log(real);
      fake = await imagesService.filterList({type:1});
      CommonController.extractIds(fake);
      CommonController.shuffleArray(fake);
      fake = fake.slice(0,15); 
      //console.log(fake);
      merged = [... real, ... fake]
      CommonController.shuffleArray(merged);
      res.status(200).send(merged);
    }catch(e){
      res.status(500).json({error: 'Internal server error'});
    }
  }
  
  /**
   * Asyncronous functions which is not allowed, it sends back error code 405
   * @param req express Request object
   * @param res express Response object
   */
  async updateAll(req: Request, res: Response): Promise<void> {
    res.status(405).json({ error: 'Method not allowed' });
  }

  /**
   * Asyncronous functions which is not allowed, it sends back error code 405
   * The insertion of the images in the db was done manually
   * @param req express Request object
   * @param res express Response object
   */
  async create(req: Request, res: Response): Promise<void> {
    res.status(405).json({ error: 'Method not allowed' });  
  }

  /**
   * Asyncronous functions that aims to insert a new evaluation for a specific image
   * return the location of the id of the evaluation in the case of success (201),
   * 500 otherwise
   * In the body the id of the user and the evaluation must be specified
   * @param req express Request object
   * @param res express Response object
   */
  async createEval(req: Request, res: Response): Promise<void> {
    const imagesService = ImagesService.getInstance();
    try{
      req.body._id = req.params.id;
      const evalId = await imagesService.createEval(req.body);
      res.status(201).location('api/images/'+ req.body._id +'evaluations/' + evalId).send(evalId);
    }catch(e){
      res.status(500).json({error: 'Internal server error'});
    }
  }
  
  /**
   * Asyncronous functions that retrieves the path of a specific image given a specific id,
   * sends back the requested path with the status code 200 otherwise 500
   * @param req express Request object
   * @param res express Response object
   */
  async getById(req: Request, res: Response): Promise<void> {
    const imagesService = ImagesService.getInstance();
    try{
      const image = await imagesService.getById(req.params.id);
      res.status(200).send(image);
    }catch(e){
      res.status(500).json({error: 'Internal server error'});
    }
  }

  /**
   * Asyncronous functions which is not allowed, it sends back error code 405
   * @param req express Request object
   * @param res express Response object
   */
  async updateById(req: Request, res: Response): Promise<void> {
    res.status(405).json({ error: 'Method not allowed' });
  }

  /**
   * Asyncronous functions which is not allowed, it sends back error code 405
   * @param req express Request object
   * @param res express Response object
   */
  async deleteAll(req: Request, res: Response): Promise<void> {
    res.status(405).json({ error: 'Method not allowed' });
  }

  /**
   * Asyncronous functions which is not allowed, it sends back error code 405
   * @param req express Request object
   * @param res express Response object
   */
  async deleteById(req: Request, res: Response): Promise<void> {
    res.status(405).json({ error: 'Method not allowed' });
  }  
}